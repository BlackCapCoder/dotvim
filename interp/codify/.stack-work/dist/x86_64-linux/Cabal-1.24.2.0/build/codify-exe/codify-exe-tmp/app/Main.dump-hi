
==================== FINAL INTERFACE ====================
2017-05-14 18:04:33.762414 UTC

interface main@main:Main 8002
  interface hash: ab6eb1abb4aa180448a904cf5eb0f086
  ABI hash: 57be9330f2b422a1c7f8f7a7aea1474b
  export-list hash: 4fffdeed91b96f88de57c34c53479db6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 59a094a2412ae56593e822bbc7a0bdb7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.f
  Main.g
  Main.main
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 process-1.4.3.0@process-1.4.3.0
                      unix-2.7.2.1@unix-2.7.2.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Conc.IO b2bbbe01493966b84e9d1ea7f978ed53
import  -/  base-4.9.1.0:GHC.IO.Handle ba98a5b34d78cbf48b41fe58a3735c69
import  -/  base-4.9.1.0:GHC.IO.Handle.FD dbf0d0d4f42ab1465129a88ccf7880ff
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  process-1.4.3.0@process-1.4.3.0:System.Process 1ee59b956b7cad68338d3f6ab3e772ed
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
c7e6d319f6f43a3caee96ab6f0736aa3
  f :: [GHC.IO.FilePath] -> GHC.Types.IO b
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.f1
                  `cast`
                (forall (b :: <*>_N).
                 <[GHC.IO.FilePath]>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R)) -}
55a670c132bdae16dab64fcf43bfd2fb
  f1 ::
    [GHC.IO.FilePath]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
b402f830f86bb97a79af1888db130209
  g :: (GHC.Num.Num t, GHC.Show.Show t) => t -> GHC.Types.IO b
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))><L,U(A,C(U),A)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.g1
                  `cast`
                (forall (b :: <*>_N) (t :: <*>_N).
                 <GHC.Num.Num t>_R
                 ->_R <GHC.Show.Show t>_R
                 ->_R <t>_R
                 ->_R Sym (GHC.Types.N:IO[0] <b>_R)) -}
5b89194a98eb22d27d550865dde01ac7
  g1 ::
    (GHC.Num.Num t, GHC.Show.Show t) =>
    t
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,1*C1(U))><L,U(A,C(U),A)><L,U><S,U>,
     Unfolding: (\ @ b
                   @ t
                   ($dNum :: GHC.Num.Num t)
                   ($dShow :: GHC.Show.Show t)
                   (eta :: t)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   lvl1 :: t = GHC.Num.fromInteger @ t $dNum Main.g3
                 } in
                 letrec {
                   g4 :: t
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
                     {- Arity: 2, Strictness: <L,U><S,U> -}
                   = \ (n :: t) (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Main.g2
                            GHC.Types.False
                            s of ds1 { (#,#) ipv ipv1 ->
                     case GHC.IO.Handle.Internals.wantWritableHandle1
                            @ ()
                            GHC.IO.Handle.hFlush2
                            GHC.IO.Handle.FD.stdout
                            GHC.IO.Handle.Internals.flushWriteBuffer1
                              `cast`
                            (<GHC.IO.Handle.Types.Handle__>_R
                             ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                            ipv of ds2 { (#,#) ipv2 ipv3 ->
                     case GHC.IO.Handle.Internals.wantReadableHandle_1
                            @ GHC.Base.String
                            GHC.IO.Handle.Text.hGetLine4
                            GHC.IO.Handle.FD.stdin
                            GHC.IO.Handle.Text.hGetLine2
                              `cast`
                            (<GHC.IO.Handle.Types.Handle__>_R
                             ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                            ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (GHC.Types.[] @ GHC.Types.Char)
                            GHC.Types.True
                            ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            (GHC.Show.show @ t $dShow n)
                            GHC.Types.True
                            ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                     g4 (GHC.Num.+ @ t $dNum n lvl1) ipv8 } } } } }
                 } in
                 g4 eta eta1) -}
b23972f41f76466cff888bdb732c0cef
  g2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "> "#) -}
e58bcf297a270b574ea97727ea8c2ccd
  g3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
d91450d6e4f857e50e01b32e7adfcaa8
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
081746faa52f3912b2a88bc5e594679d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main2
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case System.Environment.getArgs1 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Main.f1 @ () ipv3 ipv2 } }) -}
7074ee8a9c4f9bb7c23bf46ca133f916
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "codify v 0.2"#) -}
9a41605f8bc850d68d58675550e8df8a
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

